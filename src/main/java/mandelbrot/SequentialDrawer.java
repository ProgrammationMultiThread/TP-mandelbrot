/*
 * SPDX-License-Identifier: MIT
 * Author: Matthieu Perrin
 */

package mandelbrot;

import java.awt.Graphics2D;
import java.util.Collection;
import java.util.function.DoubleBinaryOperator;

/**
 * A naive, *barely working* synchronous implementation of Drawer, 
 * that must only be used as a place holder for an asynchronous, parallel, implementation
 * TODO: Do not edit this file. 
 * Create new classes that implement Drawer for your asynchronous and parallel versions
 */
public record SequentialDrawer(
		DoubleBinaryOperator function, 
		Collection<Area> areas, 
		ColorPalette palette) 
implements Drawer {

	/**
	 * Draws the represented image on a given panel
	 * This method is called each time the panel is refreshed
	 * @param graphics object that describes the panel on which to draw
	 * @return true if the drawing was successful, false otherwise
	 * In an asynchronous implementation, it is expected that the return value remains false until the image has been fully rendered
	 */
	@Override
	public boolean draw(Graphics2D graphics) throws InterruptedException {
		for(var area : areas) {
			// Recomputes the image each time the panel is refreshed...
			var image = area.getImage(function, palette);
			// ... and waits until the image is ready to be drawn
			area.drawImage(graphics, image);
		}
		return true;
	}

}
